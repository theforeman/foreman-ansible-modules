---
# Create and Delete a filter rule for packages
# A package filter is referenced by the name of the package
# It is not updated - it is created or deleted
# - create 1st rule Check to see if it exists
# - create 2nd rule Check to see if both exits

- name: "Create Content View Filter Rule for package 1"
  vars:
    content_view_filter_name: "Test Content View Filter - rpm"
    content_view_name: "Test Content View"
    organization_name: "Test Organization"
    package_name: "bear"
    filter_state: present
  content_view_filter_rule:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    content_view_filter: "{{ content_view_filter_name }}"
    name: "{{ package_name }}"
    state: "{{ filter_state }}"

  register: result

- name: "Assert success"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present

- name: "Create Content View Filter Rule for package 2"
  vars:
    content_view_filter_name: "Test Content View Filter - rpm"
    content_view_name: "Test Content View"
    organization_name: "Test Organization"
    package_name: "camel"
    filter_state: present
  content_view_filter_rule:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    content_view_filter: "{{ content_view_filter_name }}"
    name: "{{ package_name }}"
    state: "{{ filter_state }}"

  register: result

- name: "Assert success"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present
