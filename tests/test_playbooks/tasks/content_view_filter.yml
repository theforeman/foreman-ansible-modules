---
- name: "Create Content View Filter - rpm original packages"
  vars:
    content_view_filter_name: "Test Content View Filter - AllRPMsNoErrata"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: rpm
    inclusion: true
    original_packages: true
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present


- name: "Create Content View Filter - modulemd original streams"
  vars:
    content_view_filter_name: "Test Content View Filter - AllModuleStreamsNoErrata"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: modulemd
    inclusion: true
    original_module_streams: true
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present


- name: "Create Content View Filter - deb packages"
  vars:
    content_view_filter_name: "Test Content View Filter - AllDebs"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: deb
    inclusion: true
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present


- name: "Create Content View Filter - rpm exlude"
  vars:
    content_view_filter_name: "Test Content View Filter - rpm"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: rpm
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present


- name: "Create Content View Filter - package_group exlude"
  vars:
    content_view_filter_name: "Test Content View Filter - package_group"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: package_group
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present


- name: "Create Content View Filter - erratum_by_id exlude"
  vars:
    content_view_filter_name: "Test Content View Filter - erratum_by_id"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: erratum
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present


- name: "Create Content View Filter - erratum_by_date exlude"
  vars:
    content_view_filter_name: "Test Content View Filter - erratum_by_date"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: erratum
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present


- name: "Create Content View Filter - container exlude"
  vars:
    content_view_filter_name: "Test Content View Filter - docker"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: docker
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present


- name: "Create Content View Filter - modulemd exlude"
  vars:
    content_view_filter_name: "Test Content View Filter - modulemd"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: modulemd
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present


- name: "Create Content View Filter - deb exlude"
  vars:
    content_view_filter_name: "Test Content View Filter - deb"
    organization_name: "Test Organization"
    content_view_name: "Test Content View"
    filter_type: deb
    filter_state: present
  content_view_filter:
    username: "{{ foreman_username }}"
    password: "{{ foreman_password }}"
    server_url: "{{ foreman_server_url }}"
    validate_certs: "{{ foreman_validate_certs }}"
    name: "{{ content_view_filter_name }}"
    organization: "{{ organization_name }}"
    content_view: "{{ content_view_name }}"
    filter_type: "{{ filter_type }}"
    inclusion: "{{ inclusion | default(omit) }}"
    original_module_streams: "{{ original_module_streams | default(omit) }}"
    original_packages: "{{ original_packages | default(omit) }}"
    filter_state: "{{ filter_state }}"
  register: result

- name: "Assert Result"
  ansible.builtin.assert:
    fail_msg: "Ensuring content view filter is {{ filter_state }} failed! (expected_change: {{ expected_change | default('unknown') }})"
    that:
      - result.changed == expected_change
  when: expected_change is defined
  vars:
    filter_state: present
...
